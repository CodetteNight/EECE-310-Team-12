The JPacman game uses a model-view-controller architecture. Our undo-extension to JPacman must not affect the model and view used in the original JPacman, but by creating our own controller we should be able to implement the undo functionality. 

The user input components that we would need to extend would be the KeyListener and ButtonPanel classes. Consequently, the IPacmanInteraction interface and IPacmanInteraction class needs to be extended to accommodate the changes. Through the IPacmanInteraction class, changes to the underlying Game are made. IPacmanInteraction is also an Observer class, and with this, it is possible to observe state changes caused by the Game. An Observer is capable of responding to changes in the Game instance and make necessary calls to record events that needs to be "undone".

We noticed that most of the game logic is implemented in the class Game. The class Game affects the model through the available interfaces, primarily the IGameInteractor. This class (Game) is the ideal class to extend with our own game logic to implement the undo feature. To implement the undo feature, a game history would need to be maintained. One way to accomplish this is to record the Player movements, the Ghosts movements and directions, and Food sprites eaten by the Player. Private methods would be needed in our extended class to record these movements though the Observable's update() method. 

The relevant components are to be recorded only when Player movements occur. In between Player movements, Ghost movements do not need to be recorded as long as the state of every Tile containing a Sprite is recorded. The recorded state can be used to revert the Game to its previous state.